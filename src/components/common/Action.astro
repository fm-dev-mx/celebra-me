---
// Action.astro
// This component creates flexible, styled interactive elements (buttons, links, etc.)
// with various visual variants and optional icons.

import { twMerge } from "tailwind-merge";
import Icon from "@/components/common/Icon.astro";
import type { HTMLAttributes } from "astro/types";
import type { Icon as IconType } from "@/config/landing.interface";

// Define all possible variants for the Action component
type ActionVariant =
	| "primary"
	| "secondary"
	| "tertiary"
	| "text"
	| "icon"
	| "scroll"
	| "logo"
	| "large";

// Define the props for our component
interface Props extends HTMLAttributes<"a"> {
	flex?: string;
	variant?: ActionVariant; // The style variant of the button
	icon?: IconType; // Optional icon to display
	iconSize?: string; // Optional icon size
	color?: "primary" | "secondary" | "accent" | "neutral" | "text";
	as?: "a" | "button" | "div"; // Allows changing the rendered element type
}

// Destructure props with default values
const {
	flex = "flex-col",
	variant = "primary",
	icon,
	iconSize = "w-6 h-6",
	color,
	as: Element = "a",
	class: className,
	target = "_self",
	...rest
} = Astro.props;

// Base styles applied to all Action variants
const baseStyles = `  flex ${flex} inline-flex items-center justify-center transition-all duration-300 text-sm md:text-base  hover:shadow-2xl text-nowrap h-[40px] md:h-[48px]`;

// Define styles for each variant
const variantStyles = {
	primary: `py-2 px-6 rounded-3xl text-white`,
	secondary: `py-2 px-3 rounded-3xl bg-transparent border-2`,
	tertiary: `text-lg px-14 py-3 shadow-2xl`,
	text: `opacity-80 md:text-xs lg:text-sm flex items-center`,
	icon: `hover:opacity-50`,
	scroll: `flex justify-center items-center animate-bounce border-2 rounded-full w-10 h-10 hover:opacity-100 hover:bg-inherit absolute bottom-0`,
	logo: `opacity-80 md:text-xs lg:text-sm font-semibold`,
	large: `py-2.5 border-2 border-dashed px-20 md:px-40`,
};

// Define color styles based on the color prop
const colorStyles = color
	? {
			primary: `bg-${color} border-2 border-${color}`,
			secondary: `text-${color} border-${color} hover:border-opacity-90`,
			tertiary: `bg-${color}-dark text-white`,
			text: `text-${color}`,
			icon: `text-${color}`,
			scroll: `border-${color}-light bg-${color}-light text-${color}-dark brightness-125 hover:text-${color} hover:bg-${color}-light hover:border-${color}`,
			logo: `text-${color}-dark`,
			large: `bg-${color} text-white border-${color}-light`,
		}
	: {};

// Combine all styles using twMerge to handle conflicts
const buttonClasses = twMerge(
	baseStyles,
	variantStyles[variant],
	colorStyles[variant] || "",
	`hover:scale-105 hover:brightness-110`, // Add hover effects
	className,
);

// Determine icon classes
const iconClasses = twMerge("color-inherit stroke-2", iconSize);

// Determine target and rel attributes for links
const targetAttr = target === "_blank" ? "_blank" : target;
const relAttr = targetAttr === "_blank" ? "noopener noreferrer" : undefined;
---

<!-- Render the Action component -->
<Element class={buttonClasses} target={targetAttr} rel={relAttr} {...rest as any}>
	{icon && <Icon icon={icon} class={iconClasses} />}
	<slot />
</Element>
