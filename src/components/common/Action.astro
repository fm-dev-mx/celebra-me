---
import { twMerge } from 'tailwind-merge';
import Icon from "@/components/common/Icon.astro";
import type { HTMLAttributes } from 'astro/types';
import type { Icon as IconType } from "@/config/landing.interface";

// Define all possible variants for the Action component
type ActionVariant = 'primary' | 'secondary' | 'tertiary' | 'text' | 'icon' | 'scroll' | 'logo' | 'large';

// Define the props for our component
interface Props extends HTMLAttributes<'a'> {
  variant?: ActionVariant;  // The style variant of the button
  icon?: IconType;          // Optional icon to display
  as?: 'a' | 'button' | 'div';  // Allows changing the rendered element type
}

// Destructure props with default values
const {
  variant = 'primary',
  icon,
  as: Element = 'a',
  class: className,
  ...rest
} = Astro.props;

// Factory function to generate variant styles
// This approach allows for easy maintenance and extension of variants
const createVariantStyles = (): Record<ActionVariant, string> => ({
  primary: "py-2.5 px-6 rounded-lg bg-secondary text-white2 hover:scale-110 hover:brightness-110",
  secondary: "py-2.5 px-3 rounded-lg bg-transparent text-secondary border border-secondary hover:scale-110 hover:brightness-110",
  tertiary: "text-lg px-14 py-3 bg-primary-dark text-white shadow-2xl hover:scale-110 hover:brightness-110",
  text: "opacity-80 hover:scale-110 hover:opacity-90 font-light md:text-xs lg:text-sm flex items-center",
  icon: "text-white hover:opacity-50 hover:scale-105",
  scroll: "flex justify-center items-center animate-bounce border-2 border-primary bg-primary-light text-white rounded-full w-12 h-12 hover:bg-primary opacity-50 hover:opacity-100 hover:bg-inherit",
  logo: "text-secondary-dark opacity-80 hover:scale-110 hover:opacity-60 md:text-xs lg:text-sm font-semibold",
  large: "py-2.5 bg-secondary border-2 border-dashed border-secondary-light text-white2 px-20 md:px-40 hover:scale-110 hover:brightness-110",
});

// Base styles applied to all Action variants
const baseStyles = "inline-flex items-center justify-center transition-all duration-600 text-sm md:text-base hover:shadow-2xl text-nowrap";

// Generate the variant styles
const variantStyles = createVariantStyles();

// Merge base styles, variant styles, and any custom classes
// twMerge ensures no conflicts between Tailwind classes
const buttonClasses = twMerge(baseStyles, variantStyles[variant], className);

---

<!--
  Render the Action component
  We use the 'Element' variable to determine which HTML element to render
  This allows for polymorphic components (e.g., rendering as a button or link)
-->
<Element class={buttonClasses} {...rest as any}>
  {icon && <Icon icon={icon} class="mr-2" class:list={"color-inherit"} />}
  <slot />
</Element>
