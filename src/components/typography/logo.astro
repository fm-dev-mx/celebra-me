---
/** src\components\typography\logo.astro */
import type { HTMLAttributes } from "astro/types";
import Icon from "@/components/common/Icon.astro";
import IconWrapper from "@/components/common/IconWrapper.astro";
import type { Icon as IconType } from "@/config/landing.interface";
import { twMerge } from "tailwind-merge";

interface Props extends HTMLAttributes<"div"> {
	// Container properties
	as?: "h1" | "div";
	flex?: string; // Consider renaming to 'containerFlex' for clarity
	gap?: string; // Consider renaming to 'containerGap' for clarity
	margin?: string; // Consider renaming to 'containerMargin' for clarity
	padding?: string; // Consider renaming to 'containerPadding' for clarity
	horizontalAlign?: string; // Consider combining with verticalAlign into 'containerAlign'
	verticalAlign?: string; // Consider combining with horizontalAlign into 'containerAlign'
	animation?: string; // Consider renaming to 'containerAnimation' for clarity

	// Text properties
	size?: string; // Consider renaming to 'textSize' for clarity
	fontWeight?: string;
	color?: string;
	extraClasses?: string;

	// Icon properties
	iconSize?: string;
	icon?: IconType;
	iconMargin?: string;
	iconAlign?: string;
	iconBackground?: string;
	iconColor?: string;

	// Consider adding these properties for more granular control:
	// logoContainerStyles?: string;
	// logoTextStyles?: string;
	// domainTextStyles?: string;
}

const {
	// Container properties
	as: Element = "div",
	flex = "flex-col sm:flex-row", // containerFlex
	gap = "gap-0 sm:gap-4", // containerGap
	margin = "mx-auto mb-4", // containerMargin
	padding = "px-4 sm:px-8", // containerPadding
	horizontalAlign = "justify-center", // Part of containerAlign
	verticalAlign = "items-center", // Part of containerAlign
	animation = "", // containerAnimation

	// Text properties
	size = "text-2xl md:text-4xl lg:text-5xl", // textSize
	fontWeight = "font-bold",
	color = "text-primary",
	extraClasses = "shadow-text",

	// Icon wrapper properties
	iconMargin = "mx-auto mr-0 sm:mr-4 sm:mb-4 md:mt-0 lg:mt-0 xl:mt-2",
	iconAlign = "items-center",
	iconBackground = "bg-transparent",
	iconColor = "var(--secondary-dark)",

	// Logo properties
	icon = "FavIcon",
	iconSize = "w-12 h-12 sm:w-9 sm:h-9 md:w-11 md:h-11 lg:w-12 lg:h-12",

	...rest
} = Astro.props;

const containerStyles = twMerge(
	"flex",
	flex,
	gap,
	margin,
	padding,
	horizontalAlign,
	verticalAlign,
	animation,
);

const iconWrapperStyles = twMerge("flex", iconAlign, iconMargin, iconBackground);
const iconStyles = twMerge(iconBackground, iconSize);

const textStyles = twMerge(size, fontWeight, color, extraClasses);

const logoTextStyles = twMerge(
	"flex-row sm:flex-col shrink text-nowrap scale-125 mx-0 sm:mx-8",
	textStyles,
);

const comStyles = twMerge(
	"flex-row sm:flex-col scale-75 sm:scale-[70%] pt-0 sm:pt-5 md:pt-6 lg:pt-7 xl:pt-8 font-normal",
	textStyles,
);

const shimmerClass = "animate-shimmer";
const staggerShimmerClass = "stagger-shimmer";
---

<Element class={containerStyles} {...rest}>
	<div class={`flex ${flex} ${iconAlign} ${staggerShimmerClass} ${gap}`}>
		<div class={`${shimmerClass} flex-shrink-0`}>
			<IconWrapper class={iconWrapperStyles}>
				<Icon class={iconStyles} icon={icon} color={iconColor} />
			</IconWrapper>
		</div>

		<div class={`flex flex-col sm:flex-row items-center ${size}`}>
			<div class={`${logoTextStyles} ${shimmerClass}`}>celebra-me</div>
			<div class={comStyles}>.com</div>
		</div>
	</div>
</Element>
