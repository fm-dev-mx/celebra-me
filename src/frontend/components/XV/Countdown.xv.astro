---
// Astro frontmatter
import '@styles/XV/countdown.xv.scss';

interface Props {
	eventDate: string; // Date string in a parsable format
}

const { eventDate } = Astro.props;

// Function to format the date in Spanish using Intl
function getFormattedDate(dateString: string): string {
	try {
		const date = new Date(dateString);
		return new Intl.DateTimeFormat('es-ES', {
			weekday: 'long',
			day: '2-digit',
			month: 'long',
			year: 'numeric',
		}).format(date);
	} catch (error) {
		console.error('Error formatting date:', error);
		return 'Fecha no válida';
	}
}

const formattedEventDate = getFormattedDate(eventDate);
---

<section class="countdown" id="countdown" data-event-date={eventDate}>
	<h2 class="countdown__title">¡Falta poco para la Gran Fiesta!</h2>
	<p class="countdown__event-date">El {formattedEventDate}</p>
	<div class="countdown__timer" id="timer">
		<div class="countdown__time-segment">
			<span class="countdown__value" id="days">00</span>
			<span class="countdown__label">Días</span>
		</div>
		<div class="countdown__time-segment">
			<span class="countdown__value" id="hours">00</span>
			<span class="countdown__label">Horas</span>
		</div>
		<div class="countdown__time-segment">
			<span class="countdown__value" id="minutes">00</span>
			<span class="countdown__label">Minutos</span>
		</div>
		<div class="countdown__time-segment">
			<span class="countdown__value" id="seconds">00</span>
			<span class="countdown__label">Segundos</span>
		</div>
	</div>
</section>

<script type="module">
	// Client-side countdown logic
	document.addEventListener('DOMContentLoaded', () => {
		const countdownEl = document.querySelector('.countdown');
		if (!countdownEl) {
			console.error('Countdown element not found.');
			return;
		}

		const eventDateStr = countdownEl.getAttribute('data-event-date');
		if (!eventDateStr) {
			console.error('Event date not provided.');
			return;
		}

		const daysEl = document.getElementById('days');
		const hoursEl = document.getElementById('hours');
		const minutesEl = document.getElementById('minutes');
		const secondsEl = document.getElementById('seconds');

		if (!daysEl || !hoursEl || !minutesEl || !secondsEl) {
			console.error('One or more timer elements not found.');
			return;
		}

		// Declare the interval variable beforehand so it's accessible in the update function
		let intervalId;

		function updateCountdown() {
			const eventDate = new Date(eventDateStr);
			const now = new Date();
			const diff = eventDate.getTime() - now.getTime();

			if (diff <= 0) {
				// Event has passed; set all values to '00' and clear the interval
				daysEl.innerText = '00';
				hoursEl.innerText = '00';
				minutesEl.innerText = '00';
				secondsEl.innerText = '00';
				clearInterval(intervalId);
				return;
			}

			const days = Math.floor(diff / (1000 * 60 * 60 * 24));
			const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
			const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
			const seconds = Math.floor((diff % (1000 * 60)) / 1000);

			daysEl.innerText = days < 10 ? '0' + days : days.toString();
			hoursEl.innerText = hours < 10 ? '0' + hours : hours.toString();
			minutesEl.innerText = minutes < 10 ? '0' + minutes : minutes.toString();
			secondsEl.innerText = seconds < 10 ? '0' + seconds : seconds.toString();
		}

		// Initial call to display values immediately
		updateCountdown();
		// Update the countdown every second
		intervalId = window.setInterval(updateCountdown, 1000);
	});
</script>
